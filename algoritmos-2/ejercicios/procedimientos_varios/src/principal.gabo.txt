Algoritmo procesos_varios
Inicio
  var d = 1: Real;
  var v[t], vr[t], orden[t]: Entero;
  var t, i, n, opc, posicion, x, m1: Entero;
  var suma = 0, res = 0, m = 1, p = 0, im = 0: Entero;
  var pivote = 0, r = 0, z = 1: Booleano;

  Repetir
    datos(v[t], i, t);
    Mostrar << datos;

    Mientras (z = 1) Hacer;
      pantalla(opc);
      Mostrar << pantalla;

      En_Caso (opc > 0) Sea;
        Caso (opc = 1);
          aritmetica(v[t], i, t, suma, res, m, d);
          impresion_aritmetica(suma, res, m, d);
          Mostrar << impresion_aritmetica;
        Caso (opc = 2);
          respaldo(v[t], i, t, vr[t]);
          impresion_respaldo(v[t], i, t, vr[t]);
          Mostrar << impresion_respaldo;
        Caso (opc = 3);
          par_impar(v[t], i, t, p, im);
          impresion_par_impar(p, im);
          Mostrar << impresion_par_impar;
        Caso (opc = 4);
          ordenado(v[t], i, t, orden[t]);
          impresion_ordenado(v[t], i, t, orden[t]);
          Mostrar << impresion_ordenado;
        Caso (opc = 5);
          elemento_busqueda(x);
          Mostrar << elemento_busqueda;
          busqueda(v[t], i, t, x, pivote, posicion);
          impresion_busqueda(x, pivote, posicion);
          Mostrar << impresion_busqueda;
        Caso (opc = 6);
          // Version propia utilizando una funcion
          // en lugar de un procedimiento 🤙🏻

          m1 = mayor(v[t], i, t);
          Mostrar << "El mayor es ", m1;
        Caso (opc = 7);
          aritmetica(v[t], i, t, suma, res, m, d);
          impresion_aritmetica(suma, res, m, d);
          Mostrar << impresion_aritmetica;

          respaldo(v[t], i, t, vr[t]);
          impresion_respaldo(v[t], i, t, vr[t]);
          Mostrar << impresion_respaldo;

          par_impar(v[t], i, t, p, im);
          impresion_par_impar(p, im);
          Mostrar << impresion_par_impar;

          ordenado(v[t], i, t, orden[t]);
          impresion_ordenado(v[t], i, t, orden[t]);
          Mostrar << impresion_ordenado;

          elemento_busqueda(x);
          Mostrar << elemento_busqueda;
          busqueda(v[t], i, t, x, pivote, posicion);
          impresion_busqueda(x, pivote, posicion);
          Mostrar << impresion_busqueda;

          m1 = mayor(v[t], i, t);
          Mostrar << "El mayor es ", m1;
        Caso (opc = 8);
          borrar(v[t], i, t);
          Mostrar << borrar;
        Otro_Caso
          Mostrar << "Bye, bye, Hawaii!";
      Fin_Caso
      
      Mostrar << "Marque 1 para volver al menu anterior";
      Mostrar << "Marque 0 para salir de este menu";
      Leer >> z;
    Fin_Mientras
    
    Mostrar << "Marque 1 para volver a llenar el vector";
    Mostrar << "Marque 0 para salir del programa";
    Leer >> r;

    Hasta (r = 0);
  Fin_Repetir
Fin
